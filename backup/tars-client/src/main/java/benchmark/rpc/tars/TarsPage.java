// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package benchmark.rpc.tars;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TarsPage {

	@TarsStructProperty(order = 0, isRequire = true)
	public int pageNo = 0;
	@TarsStructProperty(order = 1, isRequire = true)
	public int total = 0;
	@TarsStructProperty(order = 2, isRequire = true)
	public java.util.List<TarsUser> result = null;

	public int getPageNo() {
		return pageNo;
	}

	public void setPageNo(int pageNo) {
		this.pageNo = pageNo;
	}

	public int getTotal() {
		return total;
	}

	public void setTotal(int total) {
		this.total = total;
	}

	public java.util.List<TarsUser> getResult() {
		return result;
	}

	public void setResult(java.util.List<TarsUser> result) {
		this.result = result;
	}

	public TarsPage() {
	}

	public TarsPage(int pageNo, int total, java.util.List<TarsUser> result) {
		this.pageNo = pageNo;
		this.total = total;
		this.result = result;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(pageNo);
		result = prime * result + TarsUtil.hashCode(total);
		result = prime * result + TarsUtil.hashCode(result);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TarsPage)) {
			return false;
		}
		TarsPage other = (TarsPage) obj;
		return (
			TarsUtil.equals(pageNo, other.pageNo) &&
			TarsUtil.equals(total, other.total) &&
			TarsUtil.equals(result, other.result) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(pageNo, 0);
		_os.write(total, 1);
		_os.write(result, 2);
	}

	static java.util.List<TarsUser> cache_result;
	static { 
		cache_result = new java.util.ArrayList<TarsUser>();
		TarsUser var_2 = new TarsUser();
		cache_result.add(var_2);
	}

	public void readFrom(TarsInputStream _is) {
		this.pageNo = _is.read(pageNo, 0, true);
		this.total = _is.read(total, 1, true);
		this.result = (java.util.List<TarsUser>) _is.read(cache_result, 2, true);
	}

}
